l = 0
def nand(a,b):
    #global l
    #print(f'        Nand (a = b[{i}], b = sel[0], out = out1l{i});')
    return not (a and b)

sn1 = list()
sn2 = list()
sn3 = list()
sn4 = list()
sn5 = list()
sn6 = list()
sn7 = list()
sn8 = list()
sn9 = list()
sn10 = list()
sn11 = list()
sn12 = list()
sn13 = list()
sn14 = list()
sn15 = list()
sn16 = list()
sn17 = list()
sn18 = list()
sn19 = list()
sn20 = list()
sn21 = list()
sn22 = list()
sn23 = list()
sn24 = list()
sn25 = list()
sn26 = list()
sn27 = list()
sn28 = list()
sn29 = list()
sn30 = list()
sn31 = list()
sn32 = list()
sn33 = list()
sn34 = list()
sn35 = list()
sn36 = list()
sn37 = list()

lis = list()

for i in 0,1:
    for s0 in 0,1:
        for s1 in 0,1:
            for s2 in 0,1:
                lis = list()

                n1 = nand(s2,s2)
                n2 = nand(s1,s1)
                n3 = nand(i,n1)
                n4 = nand(n2,s0)
                n5 = nand(i,s2)
                n6 = nand(n3,n3)
                n7 = nand(s0,n2)
                n8 = nand(n4,n4)
                n9 = nand(n5,n5)
                n10 = nand(s1,n7)
                n11 = nand(s2,n7)
                n12 = nand(n6,n7)
                n13 = nand(s2,n8)
                n14 = nand(s1,s0)
                n15 = nand(n9,s0)
                n16 = nand(n10,n10)
                n17 = nand(n11,n11)
                n18 = nand(n12,n12)
                n19 = nand(n13,n13)
                n20 = nand(n14,n14)
                n21 = nand(n15,n15)
                n22 = nand(n16,n6)
                n23 = nand(n17,n9)
                n24 = nand(n18,n18)
                n25 = nand(n19,i)
                n26 = nand(n20,n6)
                n27 = nand(n18,n7)
                n28 = nand(n21,n7)
                n29 = nand(n21,s1)
                n30 = nand(n27,n27)
                n31 = nand(n24,n24)
                n32 = nand(n22,n22)
                n33 = nand(n26,n26)
                n34 = nand(n23,n23)
                n35 = nand(n25,n25)
                n36 = nand(n28,n28)
                n37 = nand(n29,n29)

                sn1.append(n1)
                sn2.append(n2)
                sn3.append(n3)
                sn4.append(n4)
                sn5.append(n5)
                sn6.append(n6)
                sn7.append(n7)
                sn8.append(n8)
                sn9.append(n9)
                sn10.append(n10)
                sn11.append(n11)
                sn12.append(n12)
                sn13.append(n13)
                sn14.append(n14)
                sn15.append(n15)
                sn16.append(n16)
                sn17.append(n17)
                sn18.append(n18)
                sn19.append(n19)
                sn20.append(n20)
                sn21.append(n21)
                sn22.append(n22)
                sn23.append(n23)
                sn24.append(n24)
                sn25.append(n25)
                sn26.append(n26)
                sn27.append(n27)
                sn28.append(n28)
                sn29.append(n29)
                sn30.append(n30)
                sn31.append(n31)
                sn32.append(n32)
                sn33.append(n33)
                sn34.append(n34)
                sn35.append(n35)
                sn36.append(n36)
                sn37.append(n37)

lis.append([sn1])
lis.append([sn2])
lis.append([sn3])
lis.append([sn4])
lis.append([sn5])
lis.append([sn6])
lis.append([sn7])
lis.append([sn8])
lis.append([sn9])
lis.append([sn10])
lis.append([sn11])
lis.append([sn12])
lis.append([sn13])
lis.append([sn14])
lis.append([sn15])
lis.append([sn16])
lis.append([sn17])
lis.append([sn18])
lis.append([sn19])
lis.append([sn20])
lis.append([sn21])
lis.append([sn22])
lis.append([sn23])
lis.append([sn24])
lis.append([sn25])
lis.append([sn26])
lis.append([sn27])
lis.append([sn28])
lis.append([sn29])
lis.append([sn30])
lis.append([sn31])
lis.append([sn32])
lis.append([sn33])
lis.append([sn34])
lis.append([sn35])
lis.append([sn36])
lis.append([sn37])
      
for i in range(1,len(lis)+1):
    if lis.count(lis[i-1])>1:
        print(i)


for i in range(1, len(lis) + 1):
    current = tuple(lis[i-1][0])
    all_occurrences = []
    for j in range(len(lis)):
        if tuple(lis[j][0]) == current:
            all_occurrences.append(j + 1)
    if len(all_occurrences) > 1:
        print(f"i={i}: встречается на позициях {all_occurrences}")
