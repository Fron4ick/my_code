// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

	PARTS:
	Not(in=load, out=nload);
	Not(in=address[0], out=ns0);
	Not(in=address[1], out=ns1);
	Not(in=address[2], out=ns2);

    // Распределяем load по 8 регистрах в зависимости от address
	
	Nand (a=load, b=address[2], out=out01);
	Nand (a=load, b=out01, out=out02);
	Not (in=out01, out=x);
	Not (in=out02, out=y);

	Nand (a = y, b = address[1], out = out1);
	Nand (a = y, b = out1, out = out2);
	Not (in = out1, out = out3);
	Not (in = out2, out = out4);
	Nand (a = out3, b = address[0], out = out5);
	Nand (a = out4, b = address[0], out = out6);
	Nand (a = out4, b = out6, out = out7);
	Nand (a = out3, b = out5, out = out8);
	Not (in = out7, out = load0);
	Not (in = out6, out = load1);
	Not (in = out8, out = load2);
	Not (in = out5, out = load3);

	Nand (a = x, b = address[1], out = out1t);
	Nand (a = x, b = out1t, out = out2t);
	Not (in = out1t, out = out3t);
	Not (in = out2t, out = out4t);
	Nand (a = out3t, b = address[0], out = out5t);
	Nand (a = out4t, b = address[0], out = out6t);
	Nand (a = out4t, b = out6t, out = out7t);
	Nand (a = out3t, b = out5t, out = out8t);
	Not (in = out7t, out = load4);
	Not (in = out6t, out = load5);
	Not (in = out8t, out = load6);
	Not (in = out5t, out = load7);
//-------------------------------

	Not(in=load0, out=nload0);
	Not(in=load1, out=nload1);
	Not(in=load2, out=nload2);
	Not(in=load3, out=nload3);
	Not(in=load4, out=nload4);
	Not(in=load5, out=nload5);
	Not(in=load6, out=nload6);
	Not(in=load7, out=nload7);	

    // Восемь регистров
    Register(in = in, load = load0, out = out0W);
    Register(in = in, load = load1, out = out1W);
    Register(in = in, load = load2, out = out2W);
    Register(in = in, load = load3, out = out3W);
    Register(in = in, load = load4, out = out4W);
    Register(in = in, load = load5, out = out5W);
    Register(in = in, load = load6, out = out6W);
    Register(in = in, load = load7, out = out7W);

    // Выбираем нужный out по address
    Mux8Way16(a = out0W, b = out1W, c = out2W, d = out3W,
              e = out4W, f = out5W, g = out6W, h = out7W,
              sel = address, out = out);
}
